AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  StageName:
    Type: String
  EnvironmentName:
    Type: String
  S3AccessKeyId:
    Type: String
  S3SecretAccessKey:
    Type: String
  S3DefaultRegion:
    Type: String
  S3Bucket:
    Type: String
  PillowLayerARN:
    Type: String
Globals:
  Function:
    Runtime: python3.8
    MemorySize: 10240
    Timeout: 900
    Environment:
      Variables:
        S3_ACCESS_KEY_ID:
          'Fn::Sub': '${S3AccessKeyId}'
        S3_SECRET_ACCESS_KEY:
          'Fn::Sub': '${S3SecretAccessKey}'
        S3_DEFAULT_REGION:
          'Fn::Sub': '${S3DefaultRegion}'
        S3_BUCKET:
          'Fn::Sub': '${S3Bucket}'
Resources:
  FileStorageApiGateway:
    Type: 'AWS::Serverless::HttpApi'
    Properties:
      StageName:
        'Fn::Sub': '${StageName}'
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - '*'
        AllowOrigins:
          - '*'
  GetPresignedUrlToDownloadFile:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${EnvironmentName}GetPresignedUrlToDownloadFile'
      CodeUri: src/aws_lambda_functions/get_presigned_url_to_download_file
      Handler: lambda_function.lambda_handler
      Events:
        FileStorageApiGateway:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FileStorageApiGateway
            Path: '/get_presigned_url_to_download_file'
            Method: GET
  GetPresignedUrlToUploadFile:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${EnvironmentName}GetPresignedUrlToUploadFile'
      CodeUri: src/aws_lambda_functions/get_presigned_url_to_upload_file
      Handler: lambda_function.lambda_handler
      Events:
        FileStorageApiGateway:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FileStorageApiGateway
            Path: '/get_presigned_url_to_upload_file'
            Method: GET
  ResizeAndCropImage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${EnvironmentName}ResizeAndCropImage'
      CodeUri: src/aws_lambda_functions/resize_and_crop_image
      Handler: lambda_function.lambda_handler
      Events:
        FileStorageApiGateway:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FileStorageApiGateway
            Path: '/resize_and_crop_image'
            Method: POST
      Layers:
        - 'Fn::Sub': '${PillowLayerARN}'
  AutomaticallyResizeAndCropImage:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName:
        'Fn::Sub': '${EnvironmentName}AutomaticallyResizeAndCropImage'
      CodeUri: src/aws_lambda_functions/automatically_resize_and_crop_image
      Handler: lambda_function.lambda_handler
      Events:
        AutomaticallyResizeAndCropImageEvent:
          Type: S3
          Properties:
            Bucket:
              'Fn::Sub': '${S3Bucket}'
            Events: s3:ObjectCreated:*
            Filter:
              AutomaticallyResizeAndCropImageFilter:
                Rules:
                  - Name: prefix
                    Value: 'chat_rooms/'
                  - Name: suffix
                      Value: '.jpg'
                  - Name: suffix
                      Value: '.jpeg'
                  - Name: suffix
                      Value: '.png'
      Layers:
        - 'Fn::Sub': '${PillowLayerARN}'
